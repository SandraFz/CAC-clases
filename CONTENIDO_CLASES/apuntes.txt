 CSS

Los navegadores tienen en Configuraciones una fuente predeterminada.

Estilos de fuente sin serifas son más modernas, por ejemplo, Arial.

No usar más de dos fuentes en un mismo proyecto.

box-sizing: border-box; para que respete el aspecto que le dí originalmente a la caja cuando uso el padding, por ejemplo.

overflow:scroll; agrega barras de desplazamiento.

overflow:auto; agrega scroll solo si se desborda el contenido.

margin:0 auto; centra.

------------------------------

UNIDADES DE MEDIDA

Absolutas
Relativas
	Flexibles (para usar esta necesita una unidad fija en el contenedor padre y se da con las siguientes unidades)

vh
vw
Son relativas al viewport.

(Unidad de vh o vw en el padre y el porcentaje en el hijo)

object-fit:center (adapta la imágen pero la deforma)
object-fit:contain (respeta la relación de aspecto dentro de las medidas que le doy pero pierde estética)

Las imágenes deberían venir en el formato que necesito y no tratarlas en CSS.

Los EM y REM son para las fuentes.

•rem: relativo al tamaño que el navegador tiene establecido para las fuentes. Eso está configurado en cada cliente y por defecto es 16px=1rem.

Se puede pisar la configuración asignando un tamaño a las fuentes en el elemento html, el máximo contenedor.

•em:es relativo a la font-size determinada en el padre; si el padre no tiene definido nada, va a la configuración del navegador.
------------------------
POSICIONAMIENTO

propiedad => position(trabaja en conjunto con top, bottom, left y right)

valores:
•static: por defecto.

•relative: se mueve relativamente al lugar en el que estaba originalmente, según lo que indiquen las propiedades top, bottom, left y right. Se reserva el lugar en el layout. 

•absolute: sale del flujo del documento. Si el padre tiene relative, se mueve relativo al padre; de lo contrario del body. O sea, relativiza al padre si el padre tiene relative. Absolute necesia un ancho siempre? Se pierde el espacio en el que originalmente estaba el elemento.

||||background-image: url("archivo.ext") background-repeat, size, attachment(:fixed resulta en imagen fija debajo del resto) y position.||||

||||background: linear-gradient(to right, rgba(), rgba(), url("") ///da como resultado una imagen pisada por un color que puede tener una transparencia.|||||


||||íntima relación entre right/bottom y top/left|||||

•fixed: sale del flujo del doc y queda fijo en la pantalla.

•sticky: no pierde su lugar en el flujo del doc. pero cuando hace scroll queda en la posición que le indica el bottom? 
------------
z-index: capas cuyo valor representa la prioridad (el más alto queda arriba) y el valor máximo es 10)

||||box modeling||||
--------------------------



FLEXBOX

Al aplicar la propiedad flex al padre, los items se convierten en línea.

Por defecto trae propiedades: flow-direction-row(right), flex-direction-column(bottom?), flex-wrap(nowrap)

flex-wrap combina row y column
justify-content(x)=>(y) solo funciona cuando está wrap
align-item(y)=>(x)
En este orden cuando es una fila y alrevés cuando es columna

hijos
align-self(x)
align-item(y)
-----------------

ÍCONOS, TRANSICIONES Y ANIMACIONES

•fontAWSOME: se linkea en el head en una etiqueta script. El link lo envían al email.
O mejor. Se descarga la librería y linkea las hojas que tienen las clases que quiero usar.
Cuando dice .min.css es mejor porque está minificado el cual hace que sea más eficiente.

•lordicon: íconos animados. Se elige "embeber en html." Se pega tal cual las etiquetas que da en el lugar que quiero usar. El script se puede poner en donde uso el ícono o bien en el head o al final del body.

•transform. Valores:translateY(), translateX(), rotate(deg), scale(n,n), skew(deg, deg)

•:hover. transition (para que no sea brusco el movimiento, depende de un disparador: click, hover, etc.). Va en el elemento original (en el que no tiene :hover). 
transition: transform 2s; o sea, los segundos.


pag: Remixicon
•animaciones: no depende ningún disparador.
-----------------------------------

PREGUNTAS:
1)Cuando usamos backgound-image ¿cómo se puede agregar el atributo alt?

2)Quise poner el favicom pero no me deja descargar. O sea, descarga pero no aparece después. Y si copio, cambia. HECHO.

3)El prototipo tiene algunos detalles que parecen defecto como las imágenes de las tarjetas que no quedan a la misma altura. Lo corregimos o lo hacemos igual. Yo quise hacerlos quedar parejos pero me cambió el margin o el padding bottom. No sé cuál es porque solo puedo corregirlo dejando el defecto de las imágenes a diferentes alturas. 
-------------------------------
-------------------------------
______________________________
===============================
Lunes, 19 de septiembre de 2022

RESPONSIVE DESIGN
____________________________________________________________________________________
|	FreeCodeCamp / breakpoins estándares							|
|	Vamos a ver ahora los breakpoints comunes según el ancho de los dispositivos:	|
|														|	
|	320px — 480px: Dispositivos móviles								|
|	481px — 768px: iPads, tablets									|
|	769px — 1024px: pantallas pequeñas, ordenadores portátiles				|
|	1025px — 1200px: pantallas grandes, ordenadores de escritorio			|
|	1201px y más —  pantallas extra-grandes, televisores					|
|___________________________________________________________________________________|

•MediaQueries. Breakpoint 914x412 y landscape (A51). 600x450 ó 700x460 está bien como tamaño representativo de celulares.

20:58, trabaja sobre en nav del proyecto.
@media screen and (min-width: 500px){
}

El valor INIT borra el valor anterior y la devuelve al valor inicial previo.

INHERIT: hereda el valor del padre.

WIREFRAME (prototipo para celulares para Mobile First Design).

Rangos de 
-celulares 0 a 768px
-tablet min769px-max1024px
-desktop min 1024px a más grande.

Para maquetados:
behance.net

filter:blur;
backdrop-filter:

BREAKPOINT DE BOOTSTRAP


Breakpoint			Class infix		Dimensions
X-Small			None			<576px
Small				sm			≥576px
Medium			md			≥768px
Large				lg			≥992px
Extra large			xl			≥1200px
Extra extra large		xxl			≥1400px
________________________________________________________________________

26/09/2022

GitHub page - hosting

-settings/pages/deploy form a branch/master/root/save
-about(al costado)/arreglar el dominio al final del dominio para crear el link.
-




Netifly - hosting


•filter: 50% al padre para oscurecer la imagen.
__________________________________________

JAVASCRIPT

Investigar:

pseudocódigo
tablas de verdad diagramas de flujo

prompt(devuelve string)


CONVERSIONES
parseIn
parseFloat
Number
conversión implícita (solo JavaScript)
al colocar el signo + adelante funciona igual que number.

typeOf

null=/=undefine (solo en JavaScript)


OPERADORES
aritméticos
lógicos
relacionales


INCREMENTOS/DECREMENTOS ARITMÉTICOS
(asignan y ejecutan)

let numero=10

numero = numero +1; 
numero +=1;
numero ++;

LÓGICOS

and &&
or ||
not !

RELACIONALES

>
<
>=
<=
==
!=

____________________
= asignación
== comparación (valor independiente del tipo)
=== excluyente (tipo de dato y contenido idéntico)
____________________________________

•if/else condicionales simples
•switch condicional múltiple para cuando una variable puede tomar varios diferentes valores.


document.write();
_____________________________________

JAVASCRIPT - 19/10/2022

Condicionales - estructuras posibles

if(){}

if(){} else {}

if(){} else if {}

if(){} else if {} else {}

______________________________________

Condicional terniario???

estructura: condición ? respuesta del true : respuesta del false

_______________________________________

SWITCH

TAREA: transformar el código del ejemplo del los animales en switch.
________________________________________

BUCLES
________________________________________

FOR clásico

estructura
for(inicialización; condición; actualización){
bloque de código}

̉inicialización: se ejecuta una vez;
condición: se evalúa antes de entrar al bloque de código;
actualización: cuando termina.


continue (dentro de un condicional en el for): continua el bucle pero no pasa al siguiente bloque.

break (dentro de un condicional en el for): cuando se cumple la condición, sin concretar la actualización, pasa al siguiente bloque de código.
_____________________________________

WHILE

Se utiliza cuando yo no sé cuándo se va a cortar el bucle.

estructura

while(condición){
bloque de código}

while(condición){
bloque de código;
condición=cambia;} //para que corte y no sea infininto.

TAREA: resolver lo de la edad que se pide mientras no sea determinado número.

____________________________________

DO WHILE

 A diferencia del while, se ejecuta una vez al menos antes de evaluar la condición.

estructura

do{bloque} while (condición);
______________________________________

ARRAY's

array(reserva espacio de memoria, dirección de espacio en memoria)=/=variable(guarda el dato directamente?)

Los arrays en JavaScript son del tipo Objeto, son mutables.
____________________________

Matriz: array de arrays.

Los arrays se declara como constante para que guarde el valor?

Hay métodos para "copiar" los valores y guardarlos.

_________________________

Objetos literales (clásica declaración de objeto, similar a Json)

const persona={
nombre:"Pedro";
apellido:"Lopez";
};

Array de objeto

const arrayPersonas=[
{},
{},
{}
]

Objeto de objetos

const objetosVarios={
clima:{},
persona:{}
}
______________________________

Funciones
Fragmento de código reutilizable
Objetos de tipo function

sintaxis/declaración(se declaran arriba, primero en el script)

sin return
function MostrarMensajes(){
	instrucciones...
};

con return sin parámetros
function SumarDosNumeros(){
let a=1;
let b=2;
return a+b;
}

con parámetros
function SumarDosNumeros(a,b){
return a+b;
}

A los parámetros se les puede asignar un valor por defecto

function FuncionArray(nombre="", apeelido=""){
código...
return
}

invocación:

MostrarMensaje();

Puedo asignar el return a una variable.

let sumaTotal=SumarDosNumeros(5,7);
___________________________________


Funciones anónimas
La declaración se la asigna a una variable.

Se declara como constante como todo objeto.

const funcionAnonima=function(parámetro){
código}

Se la llama por la variable

funcionAnonima(argumento)

______________________________________

Funciones flecha
También se asigna a una variable, no tiene ni la palabra reservada function.
Se puede quitar las llaves si se muestra en una sola línea.

const agregarPersonaFlecha =(parámetros)=>{código;
return;
}
___________________________

Volvemos a arrays/métodos

Push (agregar en la última posición)
Pop (quitar en la última posición)

Propiedades
array.length

for clásico
for (let indice in estudiantes){(recorre)}
for (let estudiante of estudiantse){}

______________________________

Map

recorre un array y lo devuelve modificado como queremos.

______________________________________

DOM = Document Object Model (representación de html en js; no es un lenguaje sino elementos)

Cada etiqueta html en js es un element

El archivo en el que están es un document.

El contenido de cada elemento, text.

Los atributos, atribute: attr.

Cada elemento para js se llama object o node

Js tiene métodos.

El navegador carga en memoria los objetos que representan el html, lo que le  permite modificar...

Los nodos más importantes:
document
element
text
attr

Métodos comunes

getElementById('id') 

Eventos: onchange, onblur, onclick, etc...

Evento + controlador de evento (para que se pueda manipular): addEventListener(evento, funición anónima)

__________________________________________________

INTEGRADOR

Resumen: recibe el click y la función. 
función: validar que ingresen los inputs// Calcular el monto según cantidad y categoría// Insertar en total a pagar el valor total a pagar.
Borrar: ya tiene su programacón.


Solución:

Declarar constantes.
Declarar variables// Levantar en variables los elementos del DOM.
Declarar funciones.
Llamada de las funciones.

INVESTIGAR: expresiones regulares, cómo se escriben


querySelectorAll(devuelve un array)
